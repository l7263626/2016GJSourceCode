package com.hui.class15_mediaplayer;

import android.media.AudioManager;
import android.media.MediaPlayer;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.SeekBar;
import android.widget.TextView;

import java.io.File;
import java.io.IOException;

public class MainActivity extends AppCompatActivity {
    SeekBar seekBar,sbSound;
    TextView tvTime,tvSound;
    Button btnPlay;
    CheckBox cbIsLoop,cbMute;
    SurfaceView surfaceView;
    SurfaceHolder surfaceHolder;
    MediaPlayer mp;
    Handler handler;
    int duration;

    AudioManager audioManager;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        findviews();
        audioManager=(AudioManager)getSystemService(AUDIO_SERVICE);
        sbSound.setMax(audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC));

        handler=new Handler(){
            @Override
            public void handleMessage(Message msg) {
                super.handleMessage(msg);
                seekBar.setProgress(msg.what);
                tvTime.setText(msg.what/1000+" / "+(duration/1000));
            }
        };
    }

    void findviews(){
        seekBar=(SeekBar)findViewById(R.id.seekBar);
        seekBar.setOnSeekBarChangeListener(seekBarChangeListener);

        sbSound=(SeekBar)findViewById(R.id.seekBar2);
        sbSound.setOnSeekBarChangeListener(seekBarChangeListener);

        tvTime=(TextView)findViewById(R.id.textView);
        tvSound=(TextView)findViewById(R.id.textView2);

        btnPlay=(Button)findViewById(R.id.button);
        cbIsLoop=(CheckBox)findViewById(R.id.checkBox);
        cbIsLoop.setOnCheckedChangeListener(checkedChangeListener);

        cbMute=(CheckBox)findViewById(R.id.checkBox2);
        cbMute.setOnCheckedChangeListener(checkedChangeListener);

        surfaceView=(SurfaceView)findViewById(R.id.surfaceView);
        surfaceHolder=surfaceView.getHolder();
    }

    public void onPlay(View v){
//        staticPlayer();
//        callExternal();
        callInternet();
    }

    void staticPlayer(){
        if(mp==null) {
            mp = MediaPlayer.create(this, R.raw.littlemonster);
            mp.start();
            btnPlay.setText("暫停");
        }else {
            if (mp.isPlaying()) {
                mp.pause();
                btnPlay.setText("播放");
            } else {
                mp.start();
                btnPlay.setText("暫停");
            }
        }
    }

    void callExternal(){
        File path= Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MOVIES);
        File file=new File(path,"littlemonster.3gp"); //取得外部路徑檔案

        if(mp==null){
            mp=new MediaPlayer();
            mp.setOnPreparedListener(preparedListener);
            try {
                mp.setDataSource(file.toString());  //設定多媒體檔案來源
                mp.setDisplay(surfaceHolder);  //利用SurfaceView來播放影像
                mp.prepare();  //把檔案載到記憶體中
                mp.start();
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        timeSeekBar();
                    }
                }).start();
                btnPlay.setText("暫停");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }else {
            if (mp.isPlaying()) {
                mp.pause();
                btnPlay.setText("播放");
            } else {
                mp.start();
                btnPlay.setText("暫停");
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        timeSeekBar();
                    }
                }).start();
            }
        }
    }

    void callInternet(){
        //多媒體檔案的網址
//        String strUrl="http://www.youtube-mp3.org/get?video_id=9lZu4d_S-BM&ts_create=1477919756&r=MTIyLjExNy45LjE3NQ%3D%3D&h2=bbefc01a755252270d0b28e246bc56ab&s=151349";
        String strUrl="http://www.youtubecomtomp3.com?task=MP4&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Df4vkq2ztxSw";
        if(mp==null){
            mp=new MediaPlayer();
            mp.setOnPreparedListener(preparedListener);
            try {
                //設定多媒體檔案來源
                mp.setDataSource(strUrl);
                mp.setDisplay(surfaceHolder);  //利用SurfaceView來播放影像
                //把檔案用非同步的方式載到記憶體中
                mp.prepareAsync();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }else {
            if (mp.isPlaying()) {
                mp.pause();
                btnPlay.setText("播放");
            } else {
                mp.start();
                btnPlay.setText("暫停");
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        timeSeekBar();
                    }
                }).start();
            }
        }

    }

    public void onStop(View v){
        if(mp!=null) {
            mp.stop();
            mp.release();
            mp=null;
            btnPlay.setText("播放");
        }
    }

    MediaPlayer.OnPreparedListener preparedListener=new MediaPlayer.OnPreparedListener() {
        @Override
        public void onPrepared(MediaPlayer mediaPlayer) {
            mp.start();
            new Thread(new Runnable() {
                @Override
                public void run() {
                    timeSeekBar();
                }
            }).start();
            btnPlay.setText("暫停");
        }
    };

    void timeSeekBar(){
        if(mp!=null) {
            duration = mp.getDuration();
            seekBar.setMax(duration); //取得這首歌的總長度millisecond
            while(mp!=null && mp.isPlaying()) {
                //把現在播放的秒數更新到SeekBar
                try {
                    handler.sendEmptyMessage(mp.getCurrentPosition());
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                } catch (NullPointerException e){

                }
            }
        }

    }

    SeekBar.OnSeekBarChangeListener seekBarChangeListener=new SeekBar.OnSeekBarChangeListener() {
        @Override
        public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
            if(fromUser){ //判斷是不是使用者做拖拉的動作
                mp.seekTo(progress);
            }
        }

        @Override
        public void onStartTrackingTouch(SeekBar seekBar) {

        }

        @Override
        public void onStopTrackingTouch(SeekBar seekBar) {

        }
    };

    CompoundButton.OnCheckedChangeListener checkedChangeListener=new CompoundButton.OnCheckedChangeListener() {
        @Override
        public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
            if(mp!=null){
                mp.setLooping(b);
            }
        }
    };

    public void onRaise(View v){
        audioManager.adjustStreamVolume(AudioManager.STREAM_MUSIC,AudioManager.ADJUST_RAISE,AudioManager.FLAG_PLAY_SOUND);
        tvSound.setText(audioManager.getStreamVolume(AudioManager.STREAM_MUSIC)+" / "+audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC));

    }

    public void onLower(View v){
        audioManager.adjustStreamVolume(AudioManager.STREAM_MUSIC,AudioManager.ADJUST_LOWER,AudioManager.FLAG_PLAY_SOUND);
        tvSound.setText(audioManager.getStreamVolume(AudioManager.STREAM_MUSIC)+" / "+audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC));

    }


}