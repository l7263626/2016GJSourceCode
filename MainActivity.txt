package com.hui.class12_bluetooth;

import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothServerSocket;
import android.bluetooth.BluetoothSocket;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Handler;
import android.os.Message;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Spinner;
import android.widget.Switch;
import android.widget.TextView;
import android.widget.Toast;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.Set;
import java.util.UUID;

public class MainActivity extends AppCompatActivity {
    Switch aSwitch;
    Button btnDiscoverable,btnConnection;
    TextView tvMacAdd;
    Spinner spPaired;
    ListView lvDevice;
    EditText etInput;

    BluetoothAdapter btAdt;
    final int ENABLE_RQ=100;
    Handler handler;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        //1. 檢查是否有支援藍牙裝置，若有，開啟藍牙
        findviews();
        handler=new Handler(){
            @Override
            public void handleMessage(Message msg) {
                super.handleMessage(msg);
                btnDiscoverable.setText(String.valueOf(msg.what));
                if(msg.what==0){
                    btnDiscoverable.setText("可被搜尋");
                }
            }
        };
        setBT();
        registBroadcast();
    }

    @Override
    protected void onStop() {
        super.onStop();
        unregisterReceiver(mr);
    }

    void findviews(){
        aSwitch=(Switch)findViewById(R.id.switch1);
        aSwitch.setOnCheckedChangeListener(onCheckedChangeListener);
        btnDiscoverable=(Button)findViewById(R.id.button4);
        btnConnection=(Button)findViewById(R.id.button2);
        tvMacAdd=(TextView)findViewById(R.id.textView);
        spPaired=(Spinner)findViewById(R.id.spinner);
        spPaired.setOnItemSelectedListener(spListener);
        lvDevice=(ListView)findViewById(R.id.listView);
        lvDevice.setOnItemClickListener(lvClick);
        etInput=(EditText)findViewById(R.id.editText);
    }

    //先取得是否有藍牙，再依藍牙是否開啟設定switch的開關
    void setBT(){
        btAdt=BluetoothAdapter.getDefaultAdapter();
        if(btAdt==null){
            Toast.makeText(this,"這個裝置沒有支援藍牙",Toast.LENGTH_SHORT).show();
            return;
        }
        if(btAdt.isEnabled()){
            aSwitch.setChecked(true);
        }else{
            aSwitch.setChecked(false);
        }
    }

    CompoundButton.OnCheckedChangeListener onCheckedChangeListener=new CompoundButton.OnCheckedChangeListener() {
        @Override
        public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
            if(b){
//                btAdt.enable();
                Intent intent=new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
                startActivityForResult(intent,ENABLE_RQ);
            }else{
                btAdt.disable();
                aSwitch.setChecked(b);
            }
        }
    };

    @Override
    protected void onActivityResult(final int requestCode, final int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if(requestCode==ENABLE_RQ){
            if(resultCode==RESULT_OK){
                btAdt.enable();
                aSwitch.setChecked(true);
                queryPairedDevice();

                //啟動Server接聽Client
                new Thread(new ReadTask()).start();
            }else{
                btAdt.disable();
                aSwitch.setChecked(false);
                arrayAdapter.clear();
                spPaired.setAdapter(arrayAdapter);
            }
        }

        if(requestCode==DISCOVERABLE_RQ){
            new Thread(new Runnable() {
                @Override
                public void run() {
                    for(int i=resultCode;i>=0;i--){
                        handler.sendEmptyMessage(i);

                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }).start();
        }
    }

    ArrayAdapter<String> arrayAdapter;
    //2. 查詢本機已配對的藍牙裝置
    void queryPairedDevice(){
        arrayAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item);
        arrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        Set<BluetoothDevice> devices=btAdt.getBondedDevices();
        for(BluetoothDevice device:devices){
            arrayAdapter.add(device.getName()+" - "+device.getAddress());
        }
        spPaired.setAdapter(arrayAdapter);

    }

    AdapterView.OnItemSelectedListener spListener=new AdapterView.OnItemSelectedListener() {
        @Override
        public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
            String strMac=((TextView)view).getText().toString();
            String mac=strMac.substring(strMac.length()-17,strMac.length());
            tvMacAdd.setText(mac);
        }

        @Override
        public void onNothingSelected(AdapterView<?> adapterView) {

        }
    };


    //3. 搜尋新的藍牙裝置
    class MyReciver extends BroadcastReceiver{
        ArrayAdapter<String> lvAdt=new ArrayAdapter<String>(MainActivity.this,android.R.layout.simple_list_item_1);

        @Override
        public void onReceive(Context context, Intent intent) {
            String action=intent.getAction();
            if(action.equals(BluetoothAdapter.ACTION_DISCOVERY_STARTED)){
                Toast.makeText(MainActivity.this,"開始搜尋裝置",Toast.LENGTH_SHORT).show();
            }
            if(action.equals(BluetoothAdapter.ACTION_DISCOVERY_FINISHED)){
                Toast.makeText(MainActivity.this,"結束搜尋裝置",Toast.LENGTH_SHORT).show();
//                lvDevice.setAdapter(lvAdt);
            }
            if(action.equals(BluetoothDevice.ACTION_FOUND)){
                BluetoothDevice device=intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
                lvAdt.add(device.getName()+" - "+device.getAddress());
                lvDevice.setAdapter(lvAdt);
            }
        }
    }

    AdapterView.OnItemClickListener lvClick=new AdapterView.OnItemClickListener() {
        @Override
        public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
            String strMac=((TextView)view).getText().toString();
            String mac=strMac.substring(strMac.length()-17,strMac.length());
            tvMacAdd.setText(mac);
        }
    };


    MyReciver mr;
    //動態的廣播字串註冊
    void registBroadcast(){
        mr=new MyReciver();
        IntentFilter filter=new IntentFilter();
        filter.addAction(BluetoothAdapter.ACTION_DISCOVERY_STARTED);
        filter.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
        filter.addAction(BluetoothDevice.ACTION_FOUND);

        registerReceiver(mr,filter);

    }


    //讓手機可被搜尋
    final int DISCOVERABLE_RQ=101;
    public void onDiscoverable(View v){
        Intent intent=new Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);
        //設定可被搜尋的秒數，預設是120秒
        intent.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION,30);
        startActivityForResult(intent,DISCOVERABLE_RQ); //這個 Intent 會把設定的秒數傳到 onActivityResult 的resultCode
    }



    public void onDiscovery(View v){
        if(btAdt==null){
            return;
        }
        btAdt.startDiscovery();

    }



    //4. 連線藍牙

    String strUUID="00001101-0000-1000-8000-00805F9B34FB";
    BluetoothSocket socket;
    boolean isConnect=false;
    public void onConnection(View v){
        //當Client的連線
        BluetoothDevice btDevice=btAdt.getRemoteDevice(tvMacAdd.getText().toString());
        try {
            if(isConnect) {
                socket.close();
                isConnect=false;
                btnConnection.setText("連線");
            }else{
                socket=btDevice.createRfcommSocketToServiceRecord(UUID.fromString(strUUID));
                socket.connect();
                isConnect=true;
                btnConnection.setText("斷線");
            }

        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    //送出資料
    public void onSubmit(View v){
        if(socket==null){
            return;
        }
        try {
            OutputStream os=socket.getOutputStream();
            os.write((etInput.getText().toString()+"\n").getBytes());
            os.flush();
//            os.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    //當Server
    class ReadTask implements Runnable{
        String msg="";

        @Override
        //次執行緒執行的方法
        public void run() {

            try {
                BluetoothServerSocket serverSocket=btAdt.listenUsingRfcommWithServiceRecord("Server", UUID.fromString(strUUID));
                socket=serverSocket.accept();

                handler.post(new Runnable() {
                    @Override
                    public void run() {
                        Toast.makeText(MainActivity.this,"有人連線進來了...",Toast.LENGTH_SHORT).show();
                    }
                });
                serverSocket.close();

                //接收Client的資料
                InputStream is=socket.getInputStream();
                BufferedReader br=new BufferedReader(new InputStreamReader(is));

                while(socket!=null){
                    msg=br.readLine();
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            Toast.makeText(MainActivity.this,msg,Toast.LENGTH_SHORT).show();
                        }
                    });
                }
                br.close();
                is.close();

            } catch (IOException e) {
                e.printStackTrace();
            }

        }
    }
    
    
    //===================================================
    void sendMsg(){
        try {
            if(socket==null){
                Toast.makeText(this,"socket is null",Toast.LENGTH_SHORT).show();
                return;
            }
            OutputStream os=socket.getOutputStream();
            os.write((etInput.getText().toString()+"\n").getBytes());
            os.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    //以下兩個方法是傳送及接送「圖片」的做法概念
    void sendPicture(){
        try {
            InputStream is=getAssets().open("mushroom.png");
            byte[] buffer=new byte[is.available()];
            is.read(buffer);
            is.close();

            OutputStream os=socket.getOutputStream();
            os.write(buffer);
            os.flush();


        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    void showdPicture(){
        try {
            Bitmap bmp= BitmapFactory.decodeStream(socket.getInputStream());
            ImageView image=new ImageView(this);
            image.setImageBitmap(bmp);

            Toast toast=new Toast(this);
            toast.setView(image);
            toast.setDuration(Toast.LENGTH_LONG);
            toast.show();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    //以下兩個方法是傳送及接送「檔案」的做法概念
    void sendFile(int type,String fileName ){
        try {
            //讀檔
            InputStream is=getAssets().open("mushroom.png");
            byte[] buffer=new byte[is.available()];
            is.read(buffer);
            is.close();
            //傳送檔案名稱
            OutputStream os=socket.getOutputStream();
            os.write(fileName.getBytes());
            os.flush();

            //傳送檔案主體
            os.write(buffer);
            os.flush();


        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    void receiverFile(){
        String fileName=null;
        byte[] filebytes=null;
        //讀檔名
        try {
            InputStream is =socket.getInputStream();

        } catch (IOException e) {
            e.printStackTrace();
        }

        //讀檔案主體
        try {
            InputStream is=socket.getInputStream();
            is.read(filebytes);
        } catch (IOException e) {
            e.printStackTrace();
        }


        //寫出檔案
        File path= Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS);
        File file=new File(path,fileName);
        try {
            FileOutputStream fos=new FileOutputStream(file);
            fos.write(filebytes);
            fos.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e){

        }

    }

}